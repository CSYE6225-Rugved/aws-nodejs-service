name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    branches:
      - main  # Trigger only after PR is merged

jobs:
  test:
    name: Run API Tests with MySQL
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start MySQL Service
        run: |
          sudo systemctl start mysql
          mysql --version

      - name: Set Up MySQL Database and User
        run: |
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE USER '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "GRANT ALL PRIVILEGES ON \`${{ secrets.MYSQL_DATABASE }}\`.* TO '${{ secrets.MYSQL_USER }}'@'%';"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run API Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: npm test

  build:
    name: Build Application Artifact
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Build Artifact
        run: |
          mkdir -p build
          zip -r build/webapp.zip . -x "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: build/webapp.zip

  packer-build:
    name: Build Custom Image
    needs: build
    runs-on: ubuntu-latest
    outputs:
      INSTANCE_IP: ${{ steps.get-instance-ip.outputs.INSTANCE_IP }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Build Image with Packer
        run: |
          packer init packer_image/
          packer validate packer_image/
          packer build packer_image/

      - name: Get Instance Public IP (AWS)
        id: get-instance-ip
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=webapp-instance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "::set-output name=INSTANCE_IP::$INSTANCE_IP"

  configure-instance:
    name: Configure Instance
    needs: packer-build
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.packer-build.outputs.INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: SSH and Configure
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.packer-build.outputs.INSTANCE_IP }} << 'EOF'
          sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225
          sudo mkdir -p /opt/webapp
          sudo chown -R csye6225:csye6225 /opt/webapp
          sudo cp webapp.zip /opt/webapp/
          sudo unzip /opt/webapp/webapp.zip -d /opt/webapp/
          sudo cp service/webapp.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable webapp
          sudo systemctl start webapp
          EOF
