name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Integration Tests with MySQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start MySQL Service
        run: |
          echo "Starting MySQL..."
          sudo systemctl start mysql
          sudo systemctl status mysql || true
          mysql --version

      - name: Set Up MySQL Database and User
        run: |
          echo "Restarting MySQL..."
          sudo systemctl restart mysql

          echo "Creating database and user..."
          mysql -u root -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;"
          mysql -u root -e "CREATE USER IF NOT EXISTS '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';"
          mysql -u root -e "GRANT ALL PRIVILEGES ON \`${{ secrets.MYSQL_DATABASE }}\`.* TO '${{ secrets.MYSQL_USER }}'@'%';"
          mysql -u root -e "FLUSH PRIVILEGES;"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Integration Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: NODE_ENV=test npm test

  build:
    name: Build Application Artifact
    needs: test 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env

      - name: Build Artifact
        run: zip -r webapp.zip .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: webapp.zip

  packer-build:
    name: Build Custom Image for AWS & GCP
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Build Custom Image with Packer
        run: |
          packer init packer_image/
          packer validate packer_image/
          packer build packer_image/

      - name: Configure Custom Image Setup
        run: |
          sudo groupadd -r csye6225 || true
          sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225
          sudo mkdir -p /opt/webapp
          sudo chown -R csye6225:csye6225 /opt/webapp
          sudo cp webapp.zip /opt/webapp/
          sudo unzip /opt/webapp/webapp.zip -d /opt/webapp/
          sudo cp service/webapp.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable webapp

      - name: Ensure No Custom Image is Built on Failure
        if: failure()
        run: exit 1
