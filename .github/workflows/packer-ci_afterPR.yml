name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    branches:
      - main  # Trigger only after PR is merged

jobs:
  test:
    name: Run Integration Tests with MySQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start MySQL Service
        run: |
          echo "Starting MySQL..."
          sudo systemctl start mysql
          sudo systemctl status mysql || true
          mysql --version

      - name: Set Up MySQL Database and User
        run: |
          echo "Restarting MySQL..."
          sudo systemctl restart mysql

          echo "Creating database and user..."
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE USER '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "GRANT ALL PRIVILEGES ON \`${{ secrets.MYSQL_DATABASE }}\`.* TO '${{ secrets.MYSQL_USER }}'@'%';"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "FLUSH PRIVILEGES;"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci
          npm install dotenv --save

      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env

      - name: Run Integration Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: NODE_ENV=test npm test

  build:
    name: Build Application Artifact
    needs: test  # Ensure tests pass before building
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Build Artifact
        run: |
          mkdir -p build
          zip -r build/webapp.zip . -x "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: build/webapp.zip

  packer-build:
    name: Build Custom Image for AWS & GCP
    needs: [test, build]  # Ensure both tests and build pass before proceeding
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Build Custom Image with Packer
        run: |
          set -e  # Stop script if any command fails
          packer init packer_image/
          packer validate packer_image/
          packer build packer_image/

      - name: Ensure Application Setup in Custom Image
        run: |
          set -e
          echo "Setting up the application in the custom image..."

          sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225
          sudo mkdir -p /opt/webapp
          sudo chown -R csye6225:csye6225 /opt/webapp
          sudo cp build/webapp.zip /opt/webapp/
          sudo unzip /opt/webapp/webapp.zip -d /opt/webapp/

          echo "Configuring systemd service..."
          sudo cp service/webapp.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable webapp
