name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  test:
    if: github.event.pull_request.merged == true
    name: Run Integration Tests with MySQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: NODE_ENV=test npm test

  build:
    if: github.event.pull_request.merged == true
    name: Build Application Artifact
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Create Build Directory
        run: mkdir -p build

      - name: Create .env File
        run: |
          echo "Creating .env file..."
          cat << EOF > build/.env
          DB_NAME=${{ secrets.MYSQL_DATABASE }}
          DB_USER=${{ secrets.MYSQL_USER }}
          DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_DIALECT=${{ secrets.DB_DIALECT }}
          EOF

      - name: Build Artifact
        run: |
          cp -r * build/ 2>/dev/null || true
          cd build
          zip -r webapp.zip . -x "node_modules/*" ".git/*" "build/*"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: |
            build/webapp.zip
            build/.env
            service/webapp.service

  packer-build:
    if: github.event.pull_request.merged == true
    name: Build Custom Image for AWS & GCP
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: build

      - name: Prepare Files for Packer
        run: |
          sudo mkdir -p /tmp/packer
          sudo cp build/webapp.zip /tmp/packer/
          sudo cp build/.env /tmp/packer/
          sudo cp service/webapp.service /tmp/packer/
          sudo chmod 644 /tmp/packer/*
          echo "Verifying files in /tmp/packer:"
          ls -la /tmp/packer/

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Build Custom Image
        run: |
          packer init packer_image/
          packer validate packer_image/
          PACKER_LOG=1 packer build packer_image/

      - name: Share AMI
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

          if [ -n "$AMI_ID" ]; then
            aws ec2 modify-image-attribute \
              --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ secrets.AWS_DEMO_ACCOUNT_ID }}\"}]}"
          else
            echo "No AMI found"
            exit 1
          fi