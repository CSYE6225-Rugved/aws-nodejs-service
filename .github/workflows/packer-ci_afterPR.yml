name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Integration Tests with MySQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start MySQL Service
        run: |
          echo "Starting MySQL..."
          sudo systemctl start mysql
          sudo systemctl status mysql || true
          mysql --version

      - name: Set Up MySQL Database and User
        run: |
          echo "Restarting MySQL..."
          sudo systemctl restart mysql

          echo "Creating database and user..."
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "CREATE USER '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "GRANT ALL PRIVILEGES ON \`${{ secrets.MYSQL_DATABASE }}\`.* TO '${{ secrets.MYSQL_USER }}'@'%';"
          mysql --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }} -e "FLUSH PRIVILEGES;"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci
          npm install dotenv --save

      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env

      - name: Run Integration Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: NODE_ENV=test npm test

  packer-build:
    name: Build Custom Image for AWS & GCP
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -LO https://releases.hashicorp.com/packer/1.11.2/packer_1.11.2_linux_amd64.zip
          unzip packer_1.11.2_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Create and populate .env
        env:
          PORT: ${{ secrets.PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: |
          touch .env
          echo PORT="$PORT" >> .env
          echo DB_HOST="$DB_HOST" >> .env
          echo DB_USER="$DB_USER" >> .env
          echo DB_PASSWORD="$DB_PASSWORD" >> .env
          echo DB_NAME="$DB_NAME" >> .env
          echo DB_DIALECT="$DB_DIALECT" >> .env
        shell: bash

      - name: Create webapp.zip from existing directory
        run: |
          zip -r webapp.zip .
        shell: bash

      - name: Run `packer init`
        id: init
        run: packer init .

      - name: Run `packer validate`
        id: validate
        run: packer validate .

      - name: Run `packer build` 
        id: build
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}
        run: packer build aws-ubuntu.pkr.hcl

      - name: share image in aws
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

          if [ -n "$AMI_ID" ]; then
            echo "Sharing AMI $AMI_ID with AWS DEMO account..."
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \ 
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ secrets.AWS_DEMO_ACCOUNT_ID }}\"}]}"
          else
            echo "AMI not found, exiting."
            exit 1
          fi