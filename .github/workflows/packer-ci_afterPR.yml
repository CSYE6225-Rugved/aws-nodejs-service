name: Deploy WebApp to AWS and GCP

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run API Tests with MySQL
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install MySQL
        run: |
          echo "Updating package lists..."
          sudo apt-get update -y
          sudo apt-get upgrade -y

          echo "Fixing broken dependencies..."
          sudo apt-get install -f -y
          sudo dpkg --configure -a

          echo "Removing any existing MySQL installation..."
          sudo apt-get remove --purge -y mysql-server mysql-client mysql-common
          sudo apt-get autoremove -y
          sudo apt-get autoclean

          echo "Adding MySQL official APT repository..."
          sudo mkdir -p /etc/apt/keyrings
          sudo rm -f /etc/apt/keyrings/mysql.gpg
          curl -fsSL https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 | sudo tee /etc/apt/keyrings/mysql.gpg > /dev/null
          echo 'deb [signed-by=/etc/apt/keyrings/mysql.gpg] http://repo.mysql.com/apt/ubuntu jammy mysql-8.0' | sudo tee /etc/apt/sources.list.d/mysql.list

          echo "Updating package lists again..."
          sudo apt-get update -y

          echo "Installing MySQL Server..."
          sudo apt-get install -y mysql-server

          echo "Restarting MySQL service..."
          sudo systemctl restart mysql || sudo service mysql restart

          echo "Enabling MySQL service..."
          sudo systemctl enable mysql || echo "⚠️ Warning: MySQL could not be enabled, continuing."

          echo "Verifying MySQL service status..."
          if systemctl is-active --quiet mysql; then
              echo "MySQL is running successfully."
          else
              echo "MySQL installation failed."
              journalctl -u mysql --no-pager | tail -n 50
              exit 1
          fi

      - name: Set Up MySQL Database and User
        run: |
          echo "Restarting MySQL..."
          sudo systemctl restart mysql  # Ensure MySQL service is running

          echo "Creating database and user..."
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;"
          sudo mysql -e "CREATE USER IF NOT EXISTS '${{ secrets.MYSQL_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON \`${{ secrets.MYSQL_DATABASE }}\`.* TO '${{ secrets.MYSQL_USER }}'@'localhost' WITH GRANT OPTION;"
          sudo mysql -e "FLUSH PRIVILEGES;"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci
          npm install dotenv --save

      - name: Run API Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: localhost
          DB_DIALECT: ${{ secrets.DB_DIALECT }}

        run: |
          echo "Running API Tests..."
          NODE_ENV=test npm test

  build:
    name: Run Tests and Build Artifact
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Build Application Artifact
        run: |
          mkdir -p build
          zip -r build/webapp.zip . -x "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: build/webapp.zip

  deploy:
    name: Deploy to AWS and GCP
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Build Custom Image for AWS & GCP
        run: |
          packer init packer_image/
          packer validate packer_image/
          packer build packer_image/

  configure_instance:
    name: Configure Application on Instance
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.deploy.outputs.INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: SSH into Instance and Configure
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.deploy.outputs.INSTANCE_IP }} << EOF
          echo "Connected to instance successfully!"
          sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225
          sudo mkdir -p /opt/webapp
          sudo chown -R csye6225:csye6225 /opt/webapp
          sudo cp webapp.zip /opt/webapp/
          sudo unzip /opt/webapp/webapp.zip -d /opt/webapp/
          sudo cp service/webapp.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable webapp
          sudo systemctl start webapp
          EOF
